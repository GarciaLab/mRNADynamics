function AnalyzeLiveDataDV

%This function does all the required data exporting and runs the FISH
%analysis code


%TO-DO:
%1) Code to do automated threshold detection. This might only have to
%be done once per construct and setup. 
%2) Integrate FindAPAxis.m and FindAPAxisFullEmbryo.m.
%3) Put the segmentation and tracking into an independent function and not
%in this script.


%2013-08-08: Modified to support Laurent's segmentation and tracking code






%% Copy the images and do the initial FISH analysis


%Process the raw images from the microscopes so that they can be analyzed
%by the FISH code.
Prefix=ExportDataForFISH;
%Optional parameters:
%TAGOnly: Generate the TAG file only

%Get the relevant folders now:
[SourcePath,FISHPath,DropboxFolder,MS2CodePath,SchnitzcellsFolder]=...
    DetermineLocalFolders(Prefix);


%Start the matlab workers for the FISH analysis code
try
    matlabpool
catch
    display('matlabpool already running')
end

%First do an analysis without a threshold to generate the DoG images.
cd([FISHPath,filesep,'Analysis'])
analyzeShawnLibrary('fad',@(x)tagged(x,'id',[Prefix,'_']),'params_mRNADynamics',inf)
cd([MS2CodePath])


%% Look at the dog-filtered images and decide on a threshold to use

%We will keep the threshold low and then increase it after the fact.

%For LSM settings
Threshold=1500;   

%Now, do an analysis with an actual threshold
cd([FISHPath,filesep,'Analysis'])
analyzeShawnLibrary('fad',@(x)tagged(x,'id',[Prefix,'_']),'params_mRNADynamics',Threshold)
cd([MS2CodePath])



%% Track the nuclei and check their segmentation



%Determine division times
%Load the information about the nc from the XLS file
[Num,Txt]=xlsread([DropboxFolder,'\HGMovieDatabaseV2.xlsx']);
XLSHeaders=Txt(1,:);
Txt=Txt(2:end,:);

%Find the different columns.
DataFolderColumn=find(strcmp(XLSHeaders,'DataFolder'));
nc9Column=find(strcmp(XLSHeaders,'nc9'));
nc10Column=find(strcmp(XLSHeaders,'nc10'));
nc11Column=find(strcmp(XLSHeaders,'nc11'));
nc12Column=find(strcmp(XLSHeaders,'nc12'));
nc13Column=find(strcmp(XLSHeaders,'nc13'));
nc14Column=find(strcmp(XLSHeaders,'nc14'));
CFColumn=find(strcmp(XLSHeaders,'CF'));
Channel2Column=find(strcmp(XLSHeaders,'Channel2'));

%Convert the prefix into the string used in the XLS file
Dashes=findstr(Prefix,'-');

%Find the corresponding entry in the XLS file
if (~isempty(findstr(Prefix,'Bcd')))&(isempty(findstr(Prefix,'BcdE1')))&...
        (isempty(findstr(Prefix,'NoBcd')))
    XLSEntry=find(strcmp(Txt(:,DataFolderColumn),...
        [Date,'\BcdGFP-HisRFP']));
else
    XLSEntry=find(strcmp(Txt(:,DataFolderColumn),...
        [Prefix(1:Dashes(3)-1),filesep,Prefix(Dashes(3)+1:end)]));
end


if strcmp(Txt(XLSEntry,Channel2Column),'His-RFP')
    nc9=Num(XLSEntry,nc9Column-6);
    nc10=Num(XLSEntry,nc10Column-6);
    nc11=Num(XLSEntry,nc11Column-6);
    nc12=Num(XLSEntry,nc12Column-6);
    nc13=Num(XLSEntry,nc13Column-6);
    nc14=Num(XLSEntry,nc14Column-6);
    %This is in case the last column for CF is all nan and is not part of
    %the Num matrix
    if size(Num,2)==CFColumn-6    
        CF=Num(XLSEntry,CFColumn-6);
    else
        CF=nan;
    end
else
    error('nc information not define in HGMovieDatabase.xlsx')
end
ncs=[nc9,nc10,nc11,nc12,nc13,nc14];


%Now do the nuclear segmentation and lineage tracking. This should be put
%into an independent function.

%Create the cell array with the names.
D=dir([FISHPath,filesep,'Data',filesep,Prefix,filesep,'*His*.tif']);
for i=1:length(D)
    names{i}=[FISHPath,filesep,'Data',filesep,Prefix,filesep,D(i).name];
end


%Pull the mitosis information from ncs.
ncs=ncs(ncs~=0);

%Note that I'm adding a range of two frames frames before and after the
%determines mitosis
indMit=[ncs'-2,ncs'+2];


%Make sure to edit getdefaultParameters.m to change the pixel size
%parameters!!

%Embryo mask
ImageTemp=imread(names{1});
embryo_mask=true(size(ImageTemp));
clear ImageTemp


[nuclei, centers, Dummy, dataStructure] = ...
    mainTracking(names,'indMitosis',indMit,'embryoMask', embryo_mask);
% names is a cell array containing the names of all frames in the movie in order.
% indMitosis is an nx2 array containing the first and last frame of mitosis in every row.
% embryoMask is the possible mask of the embryo. If no embryo edge is visible,
% true(size(an_image_from_the_movie)) can be given as input.

% Convert the results to compatible structures and save them
%Put circles on the nuclei
[Ellipses] = putCirclesOnNuclei(centers,names,indMit);
%Convert nuclei structure into schnitzcell structure
[schnitzcells] = convertNucleiToSchnitzcells(nuclei); 

%Save the information
mkdir([DropboxFolder,filesep,Prefix])
save([DropboxFolder,filesep,Prefix,'\Ellipses.mat'],'Ellipses')
save([DropboxFolder,filesep,Prefix,filesep,Prefix,'_lin.mat'],'schnitzcells')
save([FISHPath,filesep,'Analysis',filesep,Prefix,'_',filesep,'dataStructure.mat'],'dataStructure')


%% Check segmentation
%Check the segmentation
CheckNucleiSegmentationTimon(Prefix)
%If segmentation was modified then we need to rerun the tracking
%Load the Ellipses and re-generate the centers
load([DropboxFolder,filesep,Prefix,'\Ellipses.mat'],'Ellipses')
centers = updateCentersFromElliipses(Ellipses, centers);
%Re-run the tracking
[nuclei, centers, Dummy, dataStructure] = mainTracking(...
    names,'indMitosis',indMit,'embryoMask', embryo_mask,...
    'space resolution', PixelSize,'time resolution',FrameTime,...
    'centers',centers,'data structure',DataStructure);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Track the particles and check the tracking. We also have the option to
%% check the nuclei tracking in this round.

%Track the particles, the two numbers are Threshold1 and Threshold2
TrackmRNADynamics(Prefix,2000,1500)


CheckParticleTracking(Prefix)


%% Done


CompileParticles(Prefix)




    