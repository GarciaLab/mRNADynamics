function [singleGaussian, singleGaussianV2] = gaussianForSpot(y, x, snippet)

    %fits: [amplitude, x position, x width, y position, y width, offset, angle, linear offset x, linear offset y] 

    % to do- rewrite the parameters in terms of a covariance matrix: sigma
    % = { {sigma_x^2, rho*sigma_x*sigma_y  }, {rho*sigma_x*sigma_y,sigma_y^2} }
    singleGaussian = @(params) (params(1).*...
    exp(-(...
    (((cos(params(7)))^2 / (2*params(3)^2) ) + ((sin(params(7)))^2 / (2*params(5)^2)))  .* (x-params(2)).^2 ...
    - 2*((-sin(2*params(7)) / (4*params(3)^2) ) + (sin(2*params(7)) / (4*params(5)^2))) .* (x-params(2)).*(y-params(4))...
    + (((sin(params(7)))^2 / (2*params(3)^2) ) + ((cos(params(7)))^2 / (2*params(5)^2))).* (y-params(4)).^2 ...
        )))...
    + params(6) + params(8).*x + params(9).*y - double(snippet);
     

    %fits: [amplitude, position vector, covariance matrix, offset vector)
    %params- @(A, x0, y0, rho, sigma_x, sigma_y, offset, offset_x, offset_y)
    
    singleGaussianV2 = @(params2) params2(1).*...
...%         ((2*pi*params2(5)*params2(6)*sqrt(1-params2(4)^2)^(-1)))...
...
     exp(-(1./(2.*(1-params2(4)^2))).*(...
        ...
       ( (x-params2(2)).^2./(2*params2(5).^2) ) +...
       ( (y-params2(3)).^2./(2*params2(6).^2) ) -...
        ( (2.*params2(4).*(x-params2(2)).*(y-params2(3))) ./  (params2(5).*params2(6)) )...
        ))...  
        + params2(7) + params2(8).*x + params2(9).*y...
        - double(snippet);
    
    
end