function CheckNuclearTracking(Prefix, varargin)
% Adapted directly from CheckParticleTracking
%
% DESCRIPTION
% The point of this function is to check the tracking of particles. The
% logic of this function should be similar to schnitzcells: We want to be
% able to correct both the segmentation and tracking.
%
% ARGUMENTS
% Prefix: Prefix of the data set to analyze
%
% OPTIONS
% NoSort : Flag to sort or not particles according to their starting frame
% sortByLength : Flag to have the particles with the most points (and thus
%       potentially most useful) tracked show up first
% nc, NC : Only look at particles that show up in nc13
%    % Currently this only starts at nc13...not restrict you to nc13 Added by Emma
%    % Also, this option shows you the max projection.
% nWorkers: number of parallel pools

%
% CONTROLS
% Frame specific:
% ./, :Move a frame forward/backward
% >/< :Move five frames forward/backward
% :/;' :Move to the next/previous empty or rejected frame within a schnitz
% cell
%  j  :Jump to a specified frame
%
% Nucleus/schnitz cell specific:
% m :Move to the next nucleus
% n :Move to the previous nucleus
% k :Jump to a specified nucleus by inputting a nucleus number
% \ :Jump to a specified nucleus by clicking
% q :Cycle between approved status: green - approved; yellow - approved but
%     with conditions (drift of nucleus, for example)
% w :Disapprove a trace
% p :Identify a nucleus.
% f: Flag nuclei with specific issues 
% e :Approve/Disapprove a frame within a trace
%
% General:
% s :Save the current Particles structure
% x :Save and exit
% 0 :Enter debug mode to fix things manually

%
% OUTPUT
%none
% Author (contact): Gabriella Martini (martini@berkeley.edu)
% Created: 9/7/2020
% Last Updated: 9/13/2020
%% 

cleanupObj = onCleanup(@myCleanupFun);
warning('off', 'MATLAB:nargchk:deprecated')
warning('off', 'MATLAB:mir_warning_maybe_uninitialized_temporary')

%% Initialization

liveExperiment = LiveExperiment(Prefix);

schnitzcells = [];
Ellipses = [];
correspondingNCInfo = [];
IntegrationArea = []; %Initialized here to avoid dynamic assignment later in function
fish = false;
% Parameters for fitting
FramesToFit = []; % actual frames of the movie that were used for fitting
SnippetEdge = 13; %Size of the snippets generated by Michael Tikhonov's code in pixels.


[sortByFrames, sortByLength,...
    ncRange, projectionMode, NC, ...
    startNC, endNC, optionalResults, nWorkers,...
    noHisOverlay,preStructs] = determineCheckNuclearTrackingOptions(varargin{:});


%% Information about about folders

% Get the folders
[~,~,DropboxFolder,~, ~,~, ~, ~,~,~,~,~, ~, ~, movieDatabase]...
    = readMovieDatabase(Prefix, optionalResults);

PreProcPath = liveExperiment.userPreFolder;

DataFolder = [DropboxFolder, filesep, Prefix];
FilePrefix = [Prefix, '_'];


if isempty(preStructs)
    [FrameInfo, schnitzcells] =...
        loadCheckNuclearTrackingMats(DataFolder, PreProcPath, FilePrefix);
else
    FrameInfo = preStructs{1};
    schnitzcells = preStructs{2};
end

xSize = liveExperiment.xDim;
ySize = liveExperiment.yDim;
pixelSize_nm = liveExperiment.pixelSize_nm;
snippetSize_px = liveExperiment.snippetSize_px;
nFrames = liveExperiment.nFrames;
nSlices = liveExperiment.zDim;
nDigits = liveExperiment.nDigits;

nSlices = nSlices + 2; %due to padding;
%Create the particle array. This is done so that we can support multiple
%channels. Also figure out the number of channels

numInputChannels = 1;

[Ellipses, UseHistoneOverlay, UseSchnitz] =...
    checkHistoneAndNuclearSegmentation(...
    PreProcPath, FilePrefix, nDigits, DropboxFolder, noHisOverlay, false);

[~, ~, ~, ~, ~, ~, ~, ~, ~, ~, ~, ~, ~, ...
    ~, ~, ~, ~, ~, ~, ~, ~, prophase, metaphase] =...
    getExperimentDataFromMovieDatabase(Prefix, movieDatabase);

ExperimentType = liveExperiment.experimentType;
Channels = liveExperiment.Channels;
Channel1 = liveExperiment.Channel1;
Channel2 = liveExperiment.Channel2;
Channel3 = liveExperiment.Channel3;
nc9 = liveExperiment.nc9;
nc10 = liveExperiment.nc10;
nc11 = liveExperiment.nc11;
nc12 = liveExperiment.nc12;
nc13 = liveExperiment.nc13;
nc14 = liveExperiment.nc14;


for i = 1:nFrames
    if i < nc9
        FrameInfo(i).nc = 8;
    elseif (i >= nc9) & (i < nc10)
        FrameInfo(i).nc = 9;
    elseif (i >= nc10) & (i < nc11)
        FrameInfo(i).nc = 10;
    elseif (i >= nc11) & (i <= nc12)
        FrameInfo(i).nc = 11;
    elseif (i >= nc12) & (i <= nc13)
        FrameInfo(i).nc = 12;
    elseif (i >= nc13) & (i <= nc14)
        FrameInfo(i).nc = 13;
    elseif i >= nc14
        FrameInfo(i).nc = 14;
    end
end
save([DataFolder, filesep, 'FrameInfo.mat'], 'FrameInfo', '-v6');

%Get the actual time corresponding to each frame, in minutes
ElapsedTime = getFrameElapsedTime(FrameInfo, nFrames);

ncFrames = [nc9, nc10, nc11, nc12, nc13, nc14]; %anaphases
ncFramesFull = [zeros(1,8), ncFrames, nFrames]; %more useful for some things
[anaphaseInMins, prophaseInMins, metaphaseInMins] =...
    getPhasesDurationsInMins(ncFrames, prophase, metaphase, ElapsedTime);

try correspondingNCInfo = [FrameInfo.nc]; end

schnitzcells = correctSchnitzCellErrors(schnitzcells, Ellipses, Prefix);
[schnitzcells] = sortNuclei(sortByFrames, sortByLength, schnitzcells);
%schnitzcells = flexIntegrateSchnitzFluo(Prefix, schnitzcells, FrameInfo, [1,2]);
%Some flags and initial parameters
NucleusToFollow = [];
CurrentFrameWithinNucleus = 1;

%% 

cntState = CNTState(liveExperiment, schnitzcells, Ellipses,...
                FrameInfo, UseHistoneOverlay, nWorkers, projectionMode);
            


try
    inputChannels = liveExperiment.inputChannels; 
    cntState.CurrentChannel = spotChannels(1);
    cntState.CurrentChannelIndex= 1;
end


if ~isempty(cntState.schnitzcells)
    checkEllipsesSchnitzMatches = checkSchnitzCellErrors(cntState.schnitzcells, cntState.Ellipses);
    if sum(checkEllipsesSchnitzMatches) > 0
        cntState.schnitzcells = correctSchnitzCellErrors(cntState.schnitzcells, cntState.Ellipses, Prefix);
        
    end
    saveNuclearChanges(cntState, DataFolder, FilePrefix, DropboxFolder);
    cntState.CurrentFrame =...
        cntState.schnitzcells(cntState.CurrentNucleus).frames(CurrentFrameWithinNucleus);

else, error('Looks like the schnitz cells structure is empty. There''s nothing to check.'); end
%% 

%cntState.schnitzcells = rejectBoundaryFrames(cntState.schnitzcells, 1);
%load the movies
movieMat = getMovieMat(liveExperiment);  


hisMat = getHisMat(liveExperiment);
maxMat = getMaxMat(liveExperiment);

ZoomRange = 50;
snipImageHandle = [];
CurrentSnippet = [];
ImageHandle = [];
spotHandles = {};
ellipseHisHandles = {};



% Changing the intial frames and particle if justNC13
if ncRange
    
    if strcmpi('nc15', endNC), lastNCFrame = nFrames;      
    else lastNCFrame = eval(endNC) - 1; end
    
    firstNCFrame = eval(startNC);
    schnitzcellsInRange = schnitzcellsWithinFrames(Prefix, firstNCFrame, lastNCFrame);
    cntState.CurrentNucleus = schnitzcellsInRange(1);
    cntState.CurrentFrame = cntState.schnitzcells(cntState.CurrentNucleus).frames(1);
    disp(['nc range: ' num2str(NC)])
    disp(['start frame: ' num2str(firstNCFrame)])
    disp(['end frame: ' num2str(lastNCFrame)])
    disp(['Nuclei in range: ' num2str(schnitzcellsInRange)])
    disp(['Number of Nuclei: ' num2str(length(schnitzcellsInRange))])
    
end
%% 


cntState.inputChannel = getInputChannel(Channel1, Channel2, Channel3);

cntState.nameSuffix = ['_ch', iIndex(cntState.CurrentChannel, 2)];

inds = find(cntState.CurrentFrame > ncFramesFull);
currentNC = inds(end);

%Get the coordinates of all the nuclei in this frame
[x, y, z] = NucleiXYZ(cntState.schnitzcells, cntState.CurrentFrame);

%If the approved field does not exist create it
if ~isfield(cntState.schnitzcells, 'Approved')

    for i = 1:cntState.numNuclei()
        cntState.schnitzcells(i).Approved = 1;
    end
    if ~isfield(cntState.schnitzcells, 'Flag')
        for i = 1:cntState.numNuclei()
            cntState.schnitzcells(i).Flag = 0;
        end
    else
        for i =1:cntState.numNuclei()
            if isempty(cntState.schnitzcells(i).Flag) 
                cntState.schnitzcells(i).F = 0;
            end
        end  
    end
elseif ~isfield(cntState.schnitzcells, 'Flag') 
    for i = 1:cntState.numNuclei()
        if cntState.schnitzcells(i).Approved == 1
            cntState.schnitzcells(i).Flag = 0;
        else
            cntState.schnitzcells(i).Flag = 1;
        end
    end

end

if ~isfield(cntState.schnitzcells, 'Checked')
    for i =1:cntState.numNuclei()
        if cntState.schnitzcells(i).Approved == 1
            cntState.schnitzcells(i).Checked = 0;
        else
            cntState.schnitzcells(i).Checked = 1;
        end
    end
end
if ~isfield(cntState.schnitzcells, 'FirstPass')
    for i =1:cntState.numNuclei()
        cntState.schnitzcells(i).FirstPass = 0;
    end
end
if ~isfield(cntState.schnitzcells, 'FrameApproved')
    for i =1:cntState.numNuclei()
        cntState.schnitzcells(i).FrameApproved = logical(ones(1, length(cntState.schnitzcells(i).frames)));
    end
end

for i =1:cntState.numNuclei()
    if isempty(cntState.schnitzcells(i).Flag) 
        cntState.schnitzcells(i).Flag = 0;
    end
    if isempty(cntState.schnitzcells(i).Checked) 
        cntState.schnitzcells(i).Checked = 0;
    end
    if isempty(cntState.schnitzcells(i).Approved) 
        cntState.schnitzcells(i).Approved = 1;
    end
    if isempty(cntState.schnitzcells(i).FirstPass) 
        cntState.schnitzcells(i).FirstPass = 0;
    end
end  
 


minFullNC = find(ncFramesFull > 0, 1);
for i=1:cntState.numNuclei()
    if  cntState.schnitzcells(i).cycle < minFullNC
        cntState.schnitzcells(i).Approved = 0;
        cntState.schnitzcells(i).Flag = 3;
        cntState.schnitzcells(i).Checked = 1;
    end
end


%Pull out the right particle if it exists in this frame
cntState.updateCurrentNucleusCellNo();

%This is the position of the current particle
[xTrace, yTrace] = cntState.getXYTraces(x, y);

cntState.updateTraceInfo();
% 

blankImage = []; % dummy, to enable calling CTPState for this later  

cntState.processImageMatrices(movieMat);
    
[cntState.schnitzcells, cntState.CurrentNucleus] =...
    orderNuclei(cntState.numNuclei, cntState.schnitzcells, cntState.CurrentNucleus, cntState.ReorderOrientation);
        %% 
    

%Define user interface
[OverlayFig, overlayAxes, ImageHandle,...
    snipFig, snipAxes, snipHandles,...
    traceFig, traceFigAxes,traceHandles,...
    zFig, zFigAxes, zProfileHandles, zTraceHandles]...
    ...
    = checkNuclearTracking_drawGUI(cntState,...
    Prefix, xSize, ySize, hisMat, ElapsedTime,...
          anaphaseInMins, ncFrames);

% tb = axtoolbar(overlayAxes);
% tb.Visible = 'off';
% tb2 = axtoolbar(snipAxes);
% tb2.Visible = 'off';


      %% 




set(0, 'CurrentFigure', OverlayFig);

frameChangeKeyInput = NuclearFrameChangeEventHandler(cntState);
nuclearChangeKeyInput = NuclearChangeEventHandler(cntState);
tracesKeyInput = NuclearTracesEventHandler(cntState, FrameInfo, ncFrames);
generalKeyInput = GeneralNuclearEventHandler(cntState, DataFolder, DropboxFolder, FilePrefix);


currentCharacter = 1;




%% Main loop - start
while (currentCharacter ~= 'x')
   
    
    %inds = find(cntState.CurrentFrame > ncFramesFull);
    %currentNC = inds(end);
    


    
    %Pull out the right nucleus/schnitz cell if it exists in this frame
    

    
    
    
   
    displayNuclearOverlays(OverlayFig,overlayAxes,...
        ImageHandle, cntState,hisMat);
    
    [snipFig, snipAxes, snipHandles]  =...
        plotNucleusSnippet(snipFig, snipAxes, snipHandles,...,...
        cntState, hisMat, xSize, ySize);
     
    [traceFig, traceFigAxes,traceHandles] = ...
        plotNuclearTrace(traceFig, traceFigAxes,traceHandles, cntState,...
        anaphaseInMins, ElapsedTime,...
        ncFrames,Prefix);
    if ~isempty(cntState.liveExperiment.inputChannels)
        [zFig, zFigAxes, zProfileHandles, zTraceHandles] = plotNuclearZFigures(...
            zFig, zFigAxes, zProfileHandles, zTraceHandles,...
            cntState);
        set(0, 'CurrentFigure', zFig);
    end


    
    set(0, 'CurrentFigure', traceFig);
    set(0, 'CurrentFigure', snipFig);
    
    set(0, 'CurrentFigure', OverlayFig);
    disableDefaultInteractivity(overlayAxes)
    currentCharacter = getUserKeyInput(OverlayFig);
    
    frameChangeKeyInput(currentCharacter);
    nuclearChangeKeyInput(currentCharacter);
    tracesKeyInput(currentCharacter);
    generalKeyInput(currentCharacter);
    
    cntState.updateCurrentNucleusCellNo();


    
    cntState.updateTraceInfo();

    cntState.processImageMatrices(movieMat);
    %checkEllipsesSchnitzMatches = checkSchnitzCellErrors(cntState.schnitzcells, cntState.Ellipses);
%     if sum(checkEllipsesSchnitzMatches) > 0
%         error('Broken!');
%     end

    
end
%% Main loop - end

% save after exiting the main loop - the user pressed 'x'
saveNuclearChanges(cntState, DataFolder, FilePrefix, DropboxFolder);
% 
disp(['(Left off at schnitz cell #', num2str(cntState.CurrentNucleus), ')'])
% 
% CheckNucleiModified(cptState, DropboxFolder, Prefix, fish)

end