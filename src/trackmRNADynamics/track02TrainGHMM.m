function Particles = track02TrainGHMM(...
      RawParticles, FrameInfo, retrack, displayFigures)
  
  % This script takes as input track fragments generated by naive GNN
  % matching and uses these fragments to train a simple model of particle
  % motion. Here I assume that measured particle movements positions are 
  % noisy representations of true underlying states. I thus use a simple
  % Hidden Markov Model to model their motion. Measurement error is taken
  % to be Gaussian. The HMM-related scripts are taken from a (very useful)
  % codebase for HMMs. 
  % See http://www.ai.mit.edu/~murphyk/Software/hmm.html for details. 

  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%% Define parameters
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  % Specify HMM model hyperparameters 
  NumCoeff = 1;          %Number of coefficients in a vector (always 1) 
  NumMixtures = 1;          %Number of distinct gaussian emission types for each state
  NumStates = 3;          %Number of motion states (this is an arbitrary but should be >=3 and <=10
  CovarianceType = 'diag'; % assume no covariance between different state emissions
  maxIter = 500;
  
  % minimum # time points in trace fragment for inclusion
  minLen = 10; 
  NCh = length(RawParticles);
  for Channel = 1:NCh
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%% Generate list of suitably long tracks
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  

    % initialize data vectors
    DataCell = {};
    trackLenVec = [];
    longIDVec = [];
    iter = 1;
    for p = 1:length(RawParticles{Channel})
      Frames = RawParticles{Channel}(p).Frame;         
      if length(Frames)>=minLen+1
        dF = diff(Frames);
        % check for discontinuities
        if any(dF>1)
          error('Multi-frame jump detected. Issue with initial particle stitching')
        end        
  
        % record
        longIDVec(iter) = p;
        trackLenVec(iter) = length(dF);
        DataCell{iter,1} = diff(RawParticles{Channel}(p).xPos);
        DataCell{iter,2} = diff(RawParticles{Channel}(p).yPos);
        DataCell{iter,3} = diff(RawParticles{Channel}(p).zPosDetrended);
        iter = iter + 1;
         
      end
    end

    % Find longest fragment to use for initialization
    [~, initID] = max(trackLenVec);

    % initial guess of parameters
    prior0 = normalise(rand(NumStates,1));
    transmat0 = mk_stochastic(rand(NumStates,NumStates));

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%% Use all available data to infer global avg motion parameters
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    globalModelStruct = struct;
    % loop through x,y, and z data
    for i = 1:size(DataCell,2)
      % initialize key inference params
      [mu0, Sigma0] = mixgauss_init(NumStates*NumMixtures, DataCell{initID,i}, CovarianceType);
      mu0 = reshape(mu0, [NumCoeff NumStates NumMixtures]);
      Sigma0 = reshape(Sigma0, [NumCoeff NumCoeff NumStates NumMixtures]);
      mixmat0 = mk_stochastic(rand(NumStates,NumMixtures));

      % conduct EM inference of HMM parameters
      [globalModelStruct(i).LL, globalModelStruct(i).Prior,globalModelStruct(i).Transmat, ...
        globalModelStruct(i).Mu, globalModelStruct(i).Sigma, globalModelStruct(i).Mixmat] = ...
          mhmm_em(DataCell(:,i), prior0, transmat0, mu0, Sigma0, mixmat0, ...
                                      'verbose', 0, 'max_iter', maxIter);
            
    end
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%% Re-Infer particle-specific transition matrices
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    iter = 1;
    for p = 1:length(RawParticles{Channel})
      % refit transition matrix if particle is long enough
      if ismember(p,longIDVec)
        hmmStruct = struct;
        for i = 1:size(DataCell,2)           
          % conduct EM inference of HMM parameters
          [hmmStruct(i).LL, hmmStruct(i).Prior,hmmStruct(i).Transmat, ...
            hmmStruct(i).Mu, hmmStruct(i).Sigma, hmmStruct(i).Mixmat] = ...
              ... % initialize with global parameters
              mhmm_em(DataCell{iter,i}, globalModelStruct(i).Prior, globalModelStruct(i).Transmat, ...
              globalModelStruct(i).Mu, globalModelStruct(i).Sigma, globalModelStruct(i).Mixmat, ...
                'verbose', 0, 'max_iter', maxIter,'adj_mix',0,'adj_mu',0,'adj_sigma',0);
                         
        end
        iter = iter + 1;
      % otherwise just use global paramters
      else
        hmmStruct = globalModelStruct;
      end
      RawParticles{Channel}(p).hmmStruct = hmmStruct;
    end
  end